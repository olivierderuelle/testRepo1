RUN THE APPLICATION
===================
mvn spring-boot:run

GENERATE THE JAR FILE FOR PRODUCTION
====================================
mvn package
java -jar target/test1-0.0.1-SNAPSHOT.war
http://localhost:8080

TAGGING GIT
===========
pipeline repo: https://github.com/olivierderuelle/testRepo1
make a new tag: git tag -a v0.1 -m "my version 0.1"
list all the tags: git tag

DEPLOYMENT TO CI/CD SERVER:
===========================
Hostname: jdev02.rapid4cloud.com
User: rapid (this is a default admin user, if needed to use "root" privilege please use "sudo")
Password: he43vm41
Initial specification: 4 x vCPU, 8 x GB RAM, 100GB backed by ESXProd01

VNC: jdev02.rapid4cloud.com:5901
password: he43vm41

deploy container to aws registry:
https://medium.com/@pavelbely/deploying-dockerized-multi-container-application-to-aws-using-jenkins-833a998ce6ed
http://docs.aws.amazon.com/AWSGettingStartedContinuousDeliveryPipeline/latest/GettingStarted/CICD_Jenkins_Pipeline.html
https://medium.com/aws-activate-startup-blog/running-services-using-docker-and-amazon-ec2-container-service-bde16b099cb9
https://renzedevries.wordpress.com/2016/07/20/publishing-a-docker-image-to-amazon-ecr-using-jenkins/
https://www.slideshare.net/AmazonWebServices/building-a-cicd-pipeline-for-container-deployment-to-amazon-ecs-may-2017-aws-online-tech-talks
http://cloudway.io/post/jenkins-in-ec2-container-service/


https://medium.com/@basi/docker-compose-from-development-to-production-88000124a57c
https://www.masterzendframework.com/docker-from-development-to-deployment/

https://blogs.technet.microsoft.com/devops/2016/06/21/a-git-workflow-for-continuous-delivery/
https://www.atlassian.com/continuous-delivery/continuous-delivery-workflows-with-feature-branching-and-gitflow
https://team-coder.com/from-git-flow-to-trunk-based-development/


MAVEN DOCKER GENERATION:
========================
mvn clean package docker:build
docker run --name=test1 -p 11111:8080 test1:odtag1
mvn docker:stop
mvn docker:run


ERROR: unable to connect to the docker daemon localhost:2375
SOLUTION: prerequisite on windows: click the "expose tcp://...:2375 port without TLs" in the docker settings.

ERROR: CANNOT FIND THE DOCKERFILE IN ROOT FOLDER
SOLUTION:  ADD <dockerFileDir>${project.basedir}</dockerFileDir> AND REMOVE <DOCKERFILE></DOCKERfiLE/>

[ERROR] Failed to execute goal io.fabric8:docker-maven-plugin:0.15.3:build (default-cli) on project test3: Execution default-cli of goal io.fabric8:docker-maven-plugin:0.15.3:build failed: A tar file cannot include itself. -> [Help 1]
SOLUTION: ADD A FILE .maven-dockerignore

docker run --name=test1 -p 11111:8080 test1
Error: Invalid or corrupt jarfile /app.jar
SOLUTION: JAR_FILE IS not found in the dockerfile so fix the pom with:
<docker.buildArg.JAR_FILE>target/${project.artifactId}-${project.version}.${project.packaging}</docker.buildArg.JAR_FILE>


ERROR: Failed to execute goal io.fabric8:docker-maven-plugin:0.15.3:build (default-cli) on project test3: Unable to build image [test1]: ADD failed: stat /var/lib/docker/tmp/docker-builder881547907/target/test3-0.0.1-SNAPSHOT.war: no such file or directory -> [Help 1]
SOLUTION: target/docker/** IN .maven-dockerignore

ERROR WHEN RUNNING THE APP:
docker run --name=test1 -p 11111:8080 test1
http://localhost:11111
Sat Dec 16 15:42:37 GMT 2017
There was an unexpected error (type=Not Found, status=404).
/WEB-INF/views/login.jsp
SOLUTION:
docker exec -it test1 /bin/sh
cat myAppLogFile.txt
DOCKER FILE WAS WRONG MUST LOAD THE WAR NOT THE JAR (JSPS DONT WORK IN EMBEDDED TOMCAT IF JAR)
ARG WAR_FILE
ADD ${WAR_FILE} app.war
ENTRYPOINT ["java","-Djava.security.egd=file:/dev/./urandom","-jar","/app.war"]
 
 
JENKINS PIPELINE FAILS:
ERROR: [ERROR] Failed to execute goal io.fabric8:docker-maven-plugin:0.15.3:build (default-cli) on project test3: Unable to check image [openjdk:8-jdk-alpine]: Connect to 127.0.0.1:2375 [/127.0.0.1] failed: Connection refused (Connection refused) -> [Help 1]
SOLUTION: 
 